#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<cmath>
#include<map>
#include<climits>
#include<cstring>
#include<set>
#include<stack>

using namespace std;
#define FOR(i,r,n) for(int i = r; i <= n; ++i)
#define run() int t; cin >>t; while(t--)
#define ll long long
#define pb push_back
const ll mod = 1000000007;

int V, E, k;
set<int> adj[1001];
int degree[1001];
bool used[1001];
vector<int> EC;

void euler(int v) {
	stack<int> st;
	st.push(v);
	while (!st.empty()) {
		int x = st.top();
		if (adj[x].size() != 0) {
			int y = *adj[x].begin();
			st.push(y);
			adj[x].erase(y);
			adj[y].erase(x);
		}
		else {
			st.pop();
			EC.pb(x);
		}
	}
	//for (int x : EC) cout << x << " ";
}

void dfs(int u) {
	used[u] = true;
	for (int x : adj[u]) {
		if (!used[x]) {
			dfs(x);
		}
	}
}

void solve() {
	cin >> V >> E;
	memset(degree, 0, sizeof(degree));
	memset(used, false, sizeof(used));
	FOR(i, 1, V) {
		adj[i].clear();
	}
	EC.clear();
	FOR(i, 0, E - 1) {
		int x, y; cin >> x >> y;
		adj[x].insert(y);
		adj[y].insert(x);
		degree[x]++;
		degree[y]++;
	}
	dfs(1);
	FOR(i, 1, V) {
		if (!used[i]) {
			cout << 0;
			return;
		}
	}
	int cnt = 0;
	FOR(i, 1, V) {
		if (degree[i] % 2 != 0) {
			cnt++;
		}
	}
	if (cnt == 0) {
		euler(1);
		if (*EC.begin() == 1 and *EC.rbegin() == 1) {
			cout << 2;
			return;
		}
	}
	else if (cnt == 2) {
		int idx1 = 0, idx2 = 0;
		int tmp = 0;
		FOR(i, 1, V) {
			if (degree[i] % 2 != 0) {
				idx1 = i;
				tmp = i + 1;
				break;
			}
		}
		FOR(i, tmp, V) {
			if (degree[i] % 2 != 0) {
				idx2 = i;
				break;
			}
		}
		//cout << idx1 << endl << idx2 << endl;
		euler(idx1);
		if (*EC.begin() == idx2) {
			cout << 1;
		}
		//for (int x : EC) cout << x << " ";
	}
	else cout << 0;
}

int main() {
	run() {
		solve();
		cout << endl;
	}
}






