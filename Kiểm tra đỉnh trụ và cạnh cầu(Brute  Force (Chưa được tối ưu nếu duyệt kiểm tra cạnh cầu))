#include<iostream>
#include<set>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<array>
#include<string>
#include<fstream>
#include<sstream>
#include<cstring>
#include<algorithm>
#include<climits>
#include<cmath>
#include<numeric>
#include<vector>
#include<stack>
#include<cstddef>
#include<utility>
#include<queue>
#include<deque>
#include<iomanip>
#include<random>
#include<cstdbool>
using namespace std;

#define str string
#define ll long long
#define ull unsigned long long
#define l long
#define fl float
#define fi first
#define se second
#define pb push_back
#define PB pop_back()
#define pf push_front
#define PF pop_front()
#define era erase
#define ins insert
#define FOR(i,r,n) for(int i=r ; i<n; ++i)
#define FORn(i,r,n) for(int i=r ; i<=n; ++i)
#define FORen(i,r,n) for(int i=n-1; i>=r; --i)

inline ll gcd(ll a, ll b) { if (b == 0) return a; else return gcd(b, a % b); }
inline ll lcm(ll a, ll b) { return b / gcd(a, b) * a; }
inline ll max(ll a, ll b) { ll max; return max = a > b ? a : b; }
inline ll min(ll a, ll b) { ll min; return min = a < b ? a : b; }

const ll mod = 1000000007;
const ll inf = 1000002804;
const int dx1[8] = { -1,-1,-1,0,0,1,1,1 };
const int dy1[8] = { -1,0,1,-1,1,-1,0,1 };
const int dx2[4] = { -1,0,1,0 };
const int dy2[4] = { 0,-1,0,1 };
const int maxn = 10001;

int color[maxn];
vector<int> v[maxn];
bool visited[maxn];

int V, E;
int lien_thong = 0;
int res = 0;
vector<int> dinh_tru;
vector<pair<int, int>> dscanh;
vector<int> canh_cau;
int cnt = 0, cnt2 = 0;

void dfs(int u) {
	visited[u] = true;
	for (int x : v[u]) {
		if (!visited[x]) {
			dfs(x);
		}
	}
}

void dinhtru() {
	FOR(i, 1, V + 1) {
		memset(visited, false, sizeof(visited));
		visited[i] = true;
		FOR(j, 1, V + 1) {
			if (!visited[j]) {
				dfs(j);
				res++;
			}
		}
		if (res > lien_thong) {
			dinh_tru.pb(i);
			cnt++;
		}
		res = 0;
		visited[i] = true;
	}
	cout << "So dinh tru la: " << cnt << endl;
	cout << "Nhung dinh tru la: ";
	///reverse(dinh_tru.begin(), dinh_tru.end());
	for (int x : dinh_tru) cout << x << " ";
	cnt = 0;
}

void dfs2(int u, int s, int t) {
	visited[u] = true;
	for (int x : v[u]) {
		if ((u == s and x == t) or (x == s and u == t)) continue;
		if (!visited[x]) dfs2(x, s, t);
	}
}

void canhcau() {
	for (pair<int, int> it : dscanh) {
		int x = it.first, y = it.second;
		//loai bo canh x,y khoi do thi
		memset(visited, false, sizeof(visited));
		int dem = 0;
		FOR(j, 1, V + 1) {
			if (!visited[j]) {
				++dem;
				dfs2(j, x, y);
			}
		}
		if (dem > lien_thong) {
			cout << "Canh cau cua do thi la: \n";
			++cnt2;
			cout << x << " " << y << endl;
		}
	}
	cout << "So luong canh cau la: " << cnt2;

}

int main() {
	cin >> V >> E;
	FOR(i, 0, E) {
		int x, y; cin >> x >> y;
		v[x].pb(y);
		v[y].pb(x);
		dscanh.pb({ x,y });
	}
	
	memset(visited, false, sizeof(visited));
	FOR(i, 1, V + 1) {
		if (!visited[i]) {
			dfs(i);
			lien_thong++;
		}
	}

	dinhtru();
	cout << endl;
	canhcau();
	cout << endl;
}

