#include<iostream>
#include<set>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<array>
#include<string>
#include<fstream>
#include<sstream>
#include<cstring>
#include<algorithm>
#include<climits>
#include<cmath>
#include<numeric>
#include<vector>
#include<stack>
#include<cstddef>
#include<utility>
#include<queue>
#include<deque>
#include<iomanip>
#include<random>
#include<cstdbool>
using namespace std;

#define str string
#define ll long long
#define ull unsigned long long
#define l long
#define fl float
#define pb push_back
#define PB pop_back()
#define pf push_front
#define PF pop_front()
#define era erase
#define ins insert
#define FOR(i,r,n) for(int i=r ; i<n; ++i)
#define FORn(i,r,n) for(int i=r ; i<=n; ++i)
#define FORen(i,r,n) for(int i=n-1; i>=r; --i)

inline ll gcd(ll a, ll b) { if (b == 0) return a; else return gcd(b, a % b); }
inline ll lcm(ll a, ll b) { return b / gcd(a, b) * a; }
inline ll max(ll a, ll b) { ll max; return max = a > b ? a : b; }
inline ll min(ll a, ll b) { ll min; return min = a < b ? a : b; }

const ll mod = 1000000007;
const ll inf = 1000002804;
const int dx1[8] = { -1,-1,-1,0,0,1,1,1 };
const int dy1[8] = { -1,0,1,-1,1,-1,0,1 };
const int dx2[4] = { -1,0,1,0 };
const int dy2[4] = { 0,-1,0,1 };
const int maxn = 100001;

int V, E, S, t;
vector<pair<int,int>> adj[maxn];
bool visited[maxn];
int pre[maxn];

void DIJKSTRA(int s, int t) {
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
	vector<ll> d(V + 1, inf);
	d[s] = 0;
	q.push({ 0,s });//Khoang cach tu dinh S den chinh no bang 0
	while (!q.empty()) {
		pair<int, int> top = q.top();
		q.pop();
		int dinh = top.second, len = top.first;
		if (len > d[dinh]) continue;
		for (pair<int, int> it : adj[dinh]) {
			int u = it.first, w = it.second;
			if (d[u] > d[dinh] + w) {
				d[u] = d[dinh] + w;
				q.push({d[u], u});
				pre[u] = dinh;
			}
		}
	}
	cout << "Duong di ngan nhat tu dinh " << s << " den cac dinh con lai: ";
	FOR(i, 1, V + 1) {
		cout << d[i] << " ";
	}
	cout << endl;
	vector<int> path;
	cout << "Duong di tu dinh " << s << " den dinh " << t << ": ";
	while (true) {
		path.pb(t);
		if (t == s) break;
		t = pre[t];
	}
	reverse(path.begin(), path.end());
	for (int x : path) {
		cout << x << " ";
	}
}


int main() {
	cin >> V >> E;
	FOR(i, 0, E) {
		int x, y, z; cin >> x >> y >> z;
		adj[x].pb({ y,z });
		/*adj[y].pb({ x,z }); */
	}
	cin >> S >> t;
	DIJKSTRA(S,t);
}

