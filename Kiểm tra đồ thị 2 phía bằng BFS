#include<iostream>
#include<set>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<array>
#include<string>
#include<fstream>
#include<sstream>
#include<cstring>
#include<algorithm>
#include<climits>
#include<cmath>
#include<numeric>
#include<vector>
#include<stack>
#include<cstddef>
#include<utility>
#include<queue>
#include<deque>
#include<iomanip>
#include<random>
#include<cstdbool>
using namespace std;

#define str string
#define ll long long
#define ull unsigned long long
#define l long
#define fl float
#define fi first
#define se second
#define pb push_back
#define PB pop_back()
#define pf push_front
#define PF pop_front()
#define era erase
#define ins insert
#define FOR(i,r,n) for(int i=r ; i<n; ++i)
#define FORn(i,r,n) for(int i=r ; i<=n; ++i)
#define FORen(i,r,n) for(int i=n-1; i>=r; --i)

inline ll gcd(ll a, ll b) { if (b == 0) return a; else return gcd(b, a % b); }
inline ll lcm(ll a, ll b) { return b / gcd(a, b) * a; }
inline ll max(ll a, ll b) { ll max; return max = a > b ? a : b; }
inline ll min(ll a, ll b) { ll min; return min = a < b ? a : b; }

const ll mod = 1000000007;
const ll inf = 1000002804;
const int dx1[8] = { -1,-1,-1,0,0,1,1,1 };
const int dy1[8] = { -1,0,1,-1,1,-1,0,1 };
const int dx2[4] = { -1,0,1,0 };
const int dy2[4] = { 0,-1,0,1 };
const int maxn = 10001;

int color[maxn];
vector<int> v[maxn];

int V, E;

void set_color() {
	FOR(i, 1, V + 1) {
		color[i] = -1;//-1 tuc la chua to mau
	}
}

bool is_Bipartite(int u) {
	//0 la mau do 1 la mau xanh
	color[u] = 0; 
	queue<int> q;
	q.push(u);
	while (!q.empty()) {
		int top = q.front();
		q.pop();
		for (int x : v[top]) {
			//kiem tra xem x da duoc tham hay chua
			if (color[x] == -1) {
			cout << top << " -> " << x << endl;
				q.push(x);
				color[x] = 1 - color[top];
			}
			else if (color[x] == color[top]) return false;
		}
	}
	return true;
}

int main() {
	cin >> V >> E;
	set_color();
	FOR(i, 0, E) {
		int x, y; cin >> x >> y;
		v[x].pb(y);
		v[y].pb(x);
	}
	bool check = true;
	FOR(i, 1, V + 1) {
		if (!is_Bipartite(i)) check = false;
		break;
	}
	if (check == true) cout << "Graph is Bipartite";
	else cout << "Graph is not Bipartite";
}
